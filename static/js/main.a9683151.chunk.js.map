{"version":3,"sources":["reducer/taskReducer.js","reducer/index.js","actions/types.js","store/index.js","components/MainContent.js","components/TimeTrackerNavbar.js","pages/CreateTaskPage.js","actions/taskActions.js","components/TaskItemStatus.js","components/TaskControl.js","util/timetools.js","components/TaskItemDuration.js","components/TaskListItem.js","components/TaskDetails.js","components/TaskList.js","pages/RunningTasksPage.js","components/TaskChart.js","util/taskOperations.js","util/chartData.js","pages/ReportsPage.js","pages/SettingsPage.js","App.js","index.js"],"names":["saveToLocalStorage","taskList","localStorage","setItem","JSON","stringify","tasksFromLocalState","parse","getItem","highestId","length","Math","max","map","each","id","initialState","availableId","combineReducers","tasks","state","action","newId","type","newTask","payload","filter","newTaskList","task","running","timerStatusArray","status","when","Date","completed","dateStarted","now","completionDate","store","createStore","reducer","composeWithDevTools","MainContent","props","children","TimeTrackerNavbar","Navbar","variant","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav","to","className","Link","href","connect","nextId","addTask","useState","isAlertVisible","setIsAlertVisible","taskName","setTaskName","taskGroup","setTaskGroup","message","alertData","setAlertData","resetForm","Container","Row","Col","xs","span","Form","Group","Label","Control","placeholder","value","onChange","e","target","Button","onClick","dateCompleted","group","block","setTimeout","Alert","showAlert","TaskItemStatus","Badge","defaultProps","startTask","pauseTask","removeTask","Number","completeTask","taskId","ButtonToolbar","DropdownButton","size","title","Dropdown","Item","Divider","convertSecondsToHMS","totalSeconds","seconds","minutes","floor","hours","calcTotalDuration","duration","next","moment","start","diff","current","i","currentMoment","padTime","time","toString","TaskItemDuration","durationInSeconds","TaskListItem","showDetails","currentDuration","setCurrentduration","timerId","setTimerId","useEffect","setInterval","d","clearInterval","t","TaskDetails","dismiss","durationString","taskData","calendar","isStarted","Table","responsive","striped","bordered","TaskList","isDetailsShown","setIsDetailsShown","taskToShow","setTaskToShow","taskItemClicked","ListGroup","key","fluid","TaskChart","data","xKey","xTitle","yKey","yTitle","style","textAlign","width","height","margin","top","right","left","bottom","dataKey","offset","position","label","angle","fill","taskOperations","totalTimeByDay","days","statusArray","startDate","startDateString","toLocaleDateString","stopDate","stopDateString","getTime","startMidnight","valueOf","setHours","startTimeTillMidnight","stopMidnight","stopTimeAfterMidnight","totalTime","startMS","chartFormats","getDailyTotals","totalTaskDaysTimeObj","reduce","acc","Object","keys","forEach","date","round","sort","a","b","getTaskTotals","TotalMinutes","TotalDisplay","toFixed","Card","Body","Title","deleteAllTasks","redirect","setRedirect","Heading","App","exact","path","component","CreateTaskPage","ReportsPage","RunningTasksPage","SettingsPage","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a9683151.chunk.js","sourcesContent":["/*\n  Properties of the task objects:\n  {\n    id: Number,\n    taskName: String,\n    running: boolean,\n    completed: boolean,\n    dateStarted: Date object, // this should be called dateCreated\n    timerStatusArray: [],\n    dateCompleted: DateObject,\n    isDetailedTask: boolean,\n    detailedTaskTimeUnits: String,\n    detailedTaskDuration: Number\n  }\n*/\n\nimport {\n  ADD_TASK,\n  REMOVE_TASK,\n  START_TASK,\n  PAUSE_TASK,\n  COMPLETE_TASK,\n  DELETE_ALL_TASKS\n} from \"../actions/types\";\n\nconst saveToLocalStorage = taskList => {\n  localStorage.setItem(\"tasks\", JSON.stringify(taskList));\n};\n\n/* Initial State */\nconst tasksFromLocalState = JSON.parse(localStorage.getItem(\"tasks\")) || [];\nconst highestId = tasksFromLocalState.length\n  ? Math.max(...tasksFromLocalState.map(each => each.id))\n  : 0;\n\nconst initialState = {\n  taskList: tasksFromLocalState,\n  availableId: highestId + 1\n};\n\n/* Reducer */\nexport default (state = initialState, action) => {\n  const newId = state.availableId;\n\n  switch (action.type) {\n    case ADD_TASK: {\n      const newTask = action.payload;\n\n      saveToLocalStorage([...state.taskList, newTask]);\n\n      return {\n        ...state,\n        availableId: newId + 1,\n        taskList: [...state.taskList, newTask]\n      };\n    }\n\n    case REMOVE_TASK:\n      localStorage.setItem(\n        \"tasks\",\n        JSON.stringify(\n          state.taskList.filter(each => each.id !== action.payload)\n        )\n      );\n      return {\n        ...state,\n        taskList: state.taskList.filter(each => each.id !== action.payload)\n      };\n\n    /*\n     * START_TASK - action started by clicking \"Start Task\" in the\n     * TaskControl Component.\n     */\n\n    case DELETE_ALL_TASKS: {\n      saveToLocalStorage([]);\n      return {\n        ...state,\n        taskList: []\n      };\n    }\n\n    case START_TASK: {\n      // get the status of the task\n      const { taskList } = state;\n\n      const newTaskList = taskList.map(task => {\n        if (task.id === action.payload && !task.running) {\n          // find out if the task is not started or if it is currently paused\n          const { timerStatusArray } = task;\n\n          // timer is currently paused, so record the date that it is resumed\n          const now = new Date();\n          const status = { status: \"started\", when: now };\n          return {\n            ...task,\n            running: true,\n            completed: false,\n            timerStatusArray: [...timerStatusArray, status],\n            dateStarted: task.dateStarted || new Date()\n          };\n        }\n        return task;\n      });\n\n      saveToLocalStorage(newTaskList);\n      return {\n        ...state,\n        taskList: newTaskList\n      };\n    }\n\n    case PAUSE_TASK: {\n      const now = new Date();\n\n      const newTaskList = state.taskList.map(task => {\n        if (task.id === action.payload && task.running) {\n          return {\n            ...task,\n            timerStatusArray: [\n              ...task.timerStatusArray,\n              { status: \"paused\", when: now }\n            ],\n            running: false\n          };\n        }\n        return task;\n      });\n\n      saveToLocalStorage(newTaskList);\n\n      return {\n        ...state,\n        taskList: newTaskList\n      };\n    }\n\n    case COMPLETE_TASK: {\n      const completionDate = new Date();\n\n      const newTaskList = state.taskList.map(task => {\n        if (task.id === action.payload) {\n          return {\n            ...task,\n            completed: true,\n            timerStatusArray: [\n              ...task.timerStatusArray,\n              { status: \"paused\", when: completionDate }\n            ],\n            running: false\n          };\n        }\n        return task;\n      });\n\n      return {\n        ...state,\n        taskList: newTaskList\n      };\n    }\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport taskReducer from \"./taskReducer\";\n\nexport default combineReducers({\n  tasks: taskReducer\n});\n","/* Action Types */\n\n// Task Actions\nexport const ADD_TASK = \"ADD_TASK\";\nexport const REMOVE_TASK = \"REMOVE_TASK\";\nexport const START_TASK = \"START_TASK\";\nexport const PAUSE_TASK = \"PAUSE_TASK\";\nexport const COMPLETE_TASK = \"COMPLETE_TASK\";\nexport const DELETE_ALL_TASKS = \"DELETE_ALL_TASKS\";\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport reducer from \"../reducer\";\n\nconst store = createStore(reducer, {}, composeWithDevTools());\n\nexport default store;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst MainContent = props => {\n  const { children } = props;\n\n  return <div>{children}</div>;\n};\n\nMainContent.propTypes = {\n  children: PropTypes.any.isRequired\n};\n\nexport default MainContent;\n","import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Link } from \"react-router-dom\";\n\nconst TimeTrackerNavbar = () => {\n  return (\n    <Navbar variant=\"dark\" bg=\"primary\" expand=\"lg\">\n      <Navbar.Brand>Time Tracker</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav>\n          <Link to=\"/\" className=\"no-decoration\">\n            <Nav.Link href=\"/\">Create A Task</Nav.Link>\n          </Link>\n\n          <Link to=\"/mytasks\" className=\"no-decoration\">\n            <Nav.Link href=\"/mytasks\">My Tasks</Nav.Link>\n          </Link>\n\n          <Link to=\"/settings\">\n            <Nav.Link href=\"/settings\">Settings</Nav.Link>\n          </Link>\n\n          <Link to=\"/reports\">\n            <Nav.Link href=\"/reports\">Reports</Nav.Link>\n          </Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default TimeTrackerNavbar;\n","/* eslint-disable no-shadow */\nimport React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\n\n// Bootstrap imports\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\n// import FormControl from \"react-bootstrap/FormControl\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\n\nimport { addTask } from \"../actions/taskActions\";\n\nconst CreateTaskPage = ({ addTask, nextId }) => {\n  const [isAlertVisible, setIsAlertVisible] = useState(false);\n  const [taskName, setTaskName] = useState(\"\");\n  const [taskGroup, setTaskGroup] = useState(\"\");\n  const [alertData, setAlertData] = useState({\n    type: \"\",\n    message: \"\"\n  });\n\n  // showAlert will display the bootstrap Alert\n  // It uses the state set in alertData which is an object of type\n  // {type: \"bootstrap alert type\", message: \"Your message\"}\n  // the alert will be hidden after 3 seconds.\n  const showAlert = () => {\n    const alertTimeOut = 3000; // 3000ms = 3 seconds\n    const { message, type } = alertData;\n\n    setTimeout(() => {\n      setIsAlertVisible(false);\n    }, alertTimeOut);\n\n    return (\n      <Alert className=\"mt-2 mb-2\" variant={type}>\n        {message}\n      </Alert>\n    );\n  };\n\n  const resetForm = () => {\n    setTaskName(\"\");\n    setTaskGroup(\"\");\n  };\n\n  // createTask() is called when the \"Create Task\" button is pressed.\n  // it creates the task object based on the data in the form and then\n  // sends it off to Redux using addTask().\n\n  const createTask = () => {\n    if (taskName === \"\") {\n      setAlertData({ type: \"danger\", message: \"You must enter a task name.\" });\n      setIsAlertVisible(true);\n    } else {\n      const task = {\n        id: nextId,\n        taskName,\n        dateStarted: new Date(),\n        timerStatusArray: [],\n        running: false,\n        dateCompleted: null,\n        completed: false,\n        group: taskGroup\n      };\n\n      addTask(task);\n      setAlertData({ type: \"success\", message: `Created task ${taskName}.` });\n      setIsAlertVisible(true);\n      resetForm();\n    }\n  };\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col xs={{ span: 12 }}>\n            <h1 className=\"display-4\">Create A New Task</h1>\n          </Col>\n        </Row>\n\n        <Form>\n          {/* Task Name Control */}\n          <Row>\n            <Col xs={{ span: 12 }}>\n              <Form.Group>\n                <Form.Label>Task Name</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter a name for your task\"\n                  value={taskName}\n                  onChange={e => setTaskName(e.target.value)}\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n\n          {/* Task Group Control */}\n          <Row>\n            <Col xs={{ span: 12 }}>\n              <Form.Group>\n                <Form.Label>Task Group</Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter a group for your task (optional)\"\n                  value={taskGroup}\n                  onChange={e => setTaskGroup(e.target.value)}\n                />\n              </Form.Group>\n            </Col>\n          </Row>\n\n          {/* Buttons */}\n          <Row>\n            <Col xs={{ span: 6 }}>\n              <Button variant=\"primary\" onClick={createTask} block>\n                Create Task\n              </Button>\n            </Col>\n\n            <Col xs={{ span: 6 }}>\n              <Button variant=\"light\" onClick={resetForm} block>\n                Reset\n              </Button>\n            </Col>\n          </Row>\n        </Form>\n\n        {isAlertVisible && showAlert(\"danger\", \"Invalid task name\")}\n      </Container>\n    </div>\n  );\n};\n\nconst mapStateToProps = state => {\n  return {\n    nextId: state.tasks.availableId\n  };\n};\nexport default connect(\n  mapStateToProps,\n  { addTask }\n)(CreateTaskPage);\n\nCreateTaskPage.propTypes = {\n  addTask: PropTypes.func.isRequired,\n  nextId: PropTypes.number.isRequired\n};\n","import {\n  ADD_TASK,\n  REMOVE_TASK,\n  START_TASK,\n  PAUSE_TASK,\n  COMPLETE_TASK,\n  DELETE_ALL_TASKS\n} from \"./types\";\n\n/* Action Creators */\nexport const addTask = task => {\n  return {\n    payload: task,\n    type: ADD_TASK\n  };\n};\n\nexport const removeTask = id => ({\n  type: REMOVE_TASK,\n  payload: Number(id)\n});\n\nexport const startTask = id => ({\n  type: START_TASK,\n  payload: id\n});\n\nexport const pauseTask = id => ({\n  type: PAUSE_TASK,\n  payload: id\n});\n\nexport const completeTask = id => ({\n  type: COMPLETE_TASK,\n  payload: id\n});\n\nexport const deleteAllTasks = () => {\n  return {\n    type: DELETE_ALL_TASKS\n  };\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Badge from \"react-bootstrap/Badge\";\n\n// TaskItemStatus is the component that shows the current status\n// of the task in the TaskList - running, completed or paused.\n\nconst TaskItemStatus = ({ running, completed }) => {\n  if (completed) {\n    return (\n      <div className=\"task-item-status\">\n        <Badge variant=\"primary\">Completed</Badge>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"task-item-status\">\n      {running ? (\n        <Badge variant=\"success\">Running</Badge>\n      ) : (\n        <Badge variant=\"warning\">Paused</Badge>\n      )}\n    </div>\n  );\n};\n\nTaskItemStatus.propTypes = {\n  running: PropTypes.bool,\n  completed: PropTypes.bool\n};\n\nTaskItemStatus.defaultProps = {\n  running: false,\n  completed: false\n};\nexport default TaskItemStatus;\n","/* eslint-disable no-shadow */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport DropdownButton from \"react-bootstrap/DropdownButton\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\n\nimport {\n  startTask,\n  pauseTask,\n  removeTask,\n  completeTask\n} from \"../actions/taskActions\";\n\nconst TaskControl = ({\n  taskId,\n  startTask,\n  pauseTask,\n  removeTask,\n  completeTask\n}) => {\n  const startTaskClicked = () => startTask(taskId);\n  const pauseTaskClicked = () => pauseTask(taskId);\n  const completeTaskClicked = () => completeTask(taskId);\n  const deleteTaskClicked = () => removeTask(taskId);\n\n  return (\n    <div className=\"task-list-item-control\">\n      <ButtonToolbar>\n        <DropdownButton size=\"sm\" className=\"ml-auto\" title=\"Task Actions\">\n          <Dropdown.Item onClick={startTaskClicked}>Start task</Dropdown.Item>\n          <Dropdown.Item onClick={pauseTaskClicked}>Pause task</Dropdown.Item>\n          <Dropdown.Item onClick={completeTaskClicked}>\n            Mark task completed\n          </Dropdown.Item>\n          <Dropdown.Divider />\n          <Dropdown.Item onClick={deleteTaskClicked}>Delete task</Dropdown.Item>\n        </DropdownButton>\n      </ButtonToolbar>\n    </div>\n  );\n};\n\nTaskControl.propTypes = {\n  taskId: PropTypes.number.isRequired,\n  startTask: PropTypes.func.isRequired,\n  pauseTask: PropTypes.func.isRequired,\n  removeTask: PropTypes.func.isRequired,\n  completeTask: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { startTask, pauseTask, removeTask, completeTask }\n)(TaskControl);\n","import moment from \"moment\";\n\nexport function convertSecondsToHMS(totalSeconds) {\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n\n  // get the number of total minutes\n  minutes = Math.floor(totalSeconds / 60);\n\n  // number of left over seconds\n  seconds = totalSeconds % 60;\n\n  // get the number of hours (if any)\n  hours = Math.floor(minutes / 60);\n  minutes %= 60; // left over minutes\n\n  return {\n    hours,\n    minutes,\n    seconds\n  };\n}\n\n// calculate the total number of seconds a timer has been running by\n// calculating the difference between a timer start and a timer pause.\n// Then just add up the differences.\nexport const calcTotalDuration = timerStatusArray => {\n  let duration = 0;\n\n  if (timerStatusArray.length !== 0) {\n    let next = null;\n\n    // if the length of the timerStatusArray is 1 then the task has just\n    // started and there is no ending entry yet. So find the difference\n    // between the starting time and now (now is used as the ending time).\n    // This will happen if the page is navigated away from while the timer\n    // is still running.\n\n    if (timerStatusArray.length === 1) {\n      const now = moment();\n      const start = moment(timerStatusArray[0].when);\n      const diff = now.diff(start, \"seconds\");\n      duration = diff;\n    } else {\n      let current = timerStatusArray[0];\n\n      for (let i = 1; i < timerStatusArray.length; i += 1) {\n        next = timerStatusArray[i];\n        if (next.status === \"paused\") {\n          // the timer is paused.\n          // find the difference between current and next\n          const currentMoment = moment(current.when);\n          const nextMoment = moment(next.when);\n          const diff = nextMoment.diff(currentMoment, \"seconds\");\n          duration += diff;\n        } else {\n          current = next;\n        }\n      }\n\n      // check if the timer is still running and add in the current number\n      // of seconds until now.\n      if (next && next.status === \"started\") {\n        const now = moment(new Date());\n        duration += now.diff(moment(current.when), \"seconds\");\n      }\n    }\n  }\n  return duration;\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { convertSecondsToHMS } from \"../util/timetools\";\n\n// this component will display the current running time of the task.\n// eslint-disable-next-line no-unused-vars\n\nconst padTime = time => (time < 10 ? `0${time}` : time.toString());\n\nconst TaskItemDuration = ({ durationInSeconds }) => {\n  const { hours, minutes, seconds } = convertSecondsToHMS(durationInSeconds);\n  return (\n    <div className=\"task-item-duration\">\n      <span className=\"duration\">\n        {padTime(hours)}:{padTime(minutes)}:{padTime(seconds)}\n      </span>\n    </div>\n  );\n};\n\nTaskItemDuration.propTypes = {\n  durationInSeconds: PropTypes.number\n};\n\nTaskItemDuration.defaultProps = {\n  durationInSeconds: 0\n};\n\nexport default TaskItemDuration;\n","/* eslint-disable jsx-a11y/no-static-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\nimport React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport TaskItemStatus from \"./TaskItemStatus\";\nimport TaskControl from \"./TaskControl\";\nimport TaskItemDuration from \"./TaskItemDuration\";\nimport { calcTotalDuration } from \"../util/timetools\";\n\nconst TaskListItem = ({ task, showDetails }) => {\n  const [currentDuration, setCurrentduration] = useState(0);\n  const [timerId, setTimerId] = useState(null);\n\n  // if timerStatusArray is empty then the timer has not been started yet\n  useEffect(() => {\n    const duration = calcTotalDuration(task.timerStatusArray);\n    setCurrentduration(duration);\n    // }\n  }, []);\n\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    if (task.running) {\n      setTimerId(\n        setInterval(() => {\n          setCurrentduration(d => setCurrentduration(d + 1));\n        }, 1000)\n      );\n      return () => {\n        clearInterval(timerId); // timer cleanup\n      };\n    }\n  }, []);\n\n  return (\n    <div className=\"task-list-item\">\n      <span\n        className=\"task-item-name text-truncate\"\n        onClick={() => showDetails(task)}\n      >\n        {task.taskName}\n      </span>\n\n      <TaskItemDuration durationInSeconds={currentDuration} />\n      <TaskItemStatus running={task.running} completed={task.completed} />\n\n      <TaskControl taskId={task.id} />\n    </div>\n  );\n};\n\nTaskListItem.propTypes = {\n  task: PropTypes.object.isRequired,\n  showDetails: PropTypes.func.isRequired\n};\n\nexport default TaskListItem;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Table from \"react-bootstrap/Table\";\nimport Button from \"react-bootstrap/Button\";\nimport moment from \"moment\";\nimport { calcTotalDuration, convertSecondsToHMS } from \"../util/timetools\";\n\nconst padTime = t => (t < 10 ? `0${t}` : `${t}`);\n\nconst TaskDetails = ({ task, dismiss }) => {\n  const { timerStatusArray } = task;\n  const duration = convertSecondsToHMS(calcTotalDuration(timerStatusArray));\n  const durationString = `${padTime(duration.hours)}:${padTime(\n    duration.minutes\n  )}:${padTime(duration.seconds)}`;\n  const taskData = timerStatusArray.map(t => {\n    const status =\n      t.status === \"started\" ? (\n        <span className=\"text-success\">Started</span>\n      ) : (\n        <span className=\"text-danger\">Paused</span>\n      );\n\n    return (\n      <tr>\n        <td>{moment(t.when).calendar()}</td>\n        <td>{status}</td>\n      </tr>\n    );\n  });\n\n  // check if the task has been started yet\n  const isStarted = !(task.timerStatusArray.length === 0);\n\n  return (\n    <div className=\"task-details-dialog\">\n      <h2 className=\"task-details-title\">{task.taskName}</h2>\n      <div className=\"task-details-table-container\">\n        <Table responsive striped bordered className=\"task-details-table\">\n          <thead>\n            <tr>\n              <td>When</td>\n              <td>Action</td>\n            </tr>\n          </thead>\n          <tbody>{taskData}</tbody>\n        </Table>\n      </div>\n      {!isStarted ? (\n        <h2>This task has not been started yet</h2>\n      ) : (\n        <h2>Total Time: {durationString}</h2>\n      )}\n      {task.completed && <h2>This task was completed.</h2>}\n      <Button variant=\"outline-primary\" size=\"lg\" onClick={() => dismiss()}>\n        Close\n      </Button>\n    </div>\n  );\n};\n\nTaskDetails.propTypes = {\n  task: PropTypes.object.isRequired,\n  dismiss: PropTypes.func.isRequired\n};\n\nexport default TaskDetails;\n","import React, { useState } from \"react\";\nimport { PropTypes } from \"prop-types\";\n\n// bootstrap imports\nimport ListGroup from \"react-bootstrap/ListGroup\";\n\nimport TaskListItem from \"./TaskListItem\";\nimport TaskDetails from \"./TaskDetails\";\n\nconst TaskList = ({ tasks, title }) => {\n  const [isDetailsShown, setIsDetailsShown] = useState(false);\n  const [taskToShow, setTaskToShow] = useState(null);\n\n  const dismissDetails = () => setIsDetailsShown(false);\n\n  const taskItemClicked = task => {\n    if (!isDetailsShown) {\n      setIsDetailsShown(true);\n      setTaskToShow(task);\n    }\n  };\n\n  return (\n    <div className=\"task-list-container\">\n      <h2 className=\"task-list-title\">{title}</h2>\n      <div className=\"task-list\">\n        {tasks.length === 0 ? (\n          <h2>No tasks to display.</h2>\n        ) : (\n          <ListGroup>\n            {tasks.map(task => (\n              <ListGroup.Item key={task.id}>\n                <TaskListItem task={task} showDetails={taskItemClicked} />\n              </ListGroup.Item>\n            ))}\n          </ListGroup>\n        )}\n      </div>\n\n      {isDetailsShown && (\n        <TaskDetails task={taskToShow} dismiss={dismissDetails} />\n      )}\n    </div>\n  );\n};\n\nTaskList.propTypes = {\n  tasks: PropTypes.array.isRequired,\n  title: PropTypes.string\n};\n\nTaskList.defaultProps = {\n  title: \"Tasks\"\n};\n\nexport default TaskList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n// import ListGroup from \"react-bootstrap/ListGroup\";\nimport TaskList from \"../components/TaskList\";\n\nconst RunningTasksPage = ({ taskList }) => {\n  return (\n    <Container fluid>\n      <div className=\"page-header\">\n        <h2 className=\"display-3\">My Tasks</h2>\n      </div>\n\n      <Row>\n        <TaskList\n          title=\"Running Tasks\"\n          tasks={taskList.filter(task => task.running)}\n        />\n      </Row>\n\n      <Row>\n        <TaskList\n          title=\"Paused Tasks\"\n          tasks={taskList.filter(task => !task.running && !task.completed)}\n        />\n      </Row>\n      <Row>\n        <TaskList\n          title=\"Completed Tasks\"\n          tasks={taskList.filter(task => task.completed)}\n        />\n      </Row>\n    </Container>\n  );\n};\n\nRunningTasksPage.propTypes = {\n  taskList: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    taskList: state.tasks.taskList\n  };\n};\nexport default connect(mapStateToProps)(RunningTasksPage);\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport {\n  ResponsiveContainer,\n  BarChart,\n  XAxis,\n  YAxis,\n  Tooltip,\n  Label,\n  Bar\n} from 'recharts';\n\nconst TaskChart = ({ data, title, xKey, xTitle, yKey, yTitle }) => {\n  return (\n    <div>\n      {/* TODO: get rechart title label to work and remove h2 element */}\n      <h2 style={{ textAlign: 'center' }}>{title}</h2>\n      <ResponsiveContainer width=\"100%\" height={300}>\n        <BarChart\n          data={data}\n          margin={{\n            top: 0,\n            right: 0,\n            left: 0,\n            bottom: 50\n          }}\n        >\n          <XAxis dataKey={xKey}>\n            <Label value={xTitle} offset={-10} position=\"insideBottom\" />\n          </XAxis>\n          <YAxis\n            label={{ value: yTitle, angle: -90, position: 'insideLeft' }}\n          />\n          <Tooltip />\n          <Bar dataKey={yKey} fill=\"lightsteelblue\" />\n        </BarChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nTaskChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  title: PropTypes.string.isRequired,\n  xKey: PropTypes.string.isRequired,\n  xTitle: PropTypes.string.isRequired,\n  yKey: PropTypes.string.isRequired,\n  yTitle: PropTypes.string.isRequired\n};\n\nexport default TaskChart;\n","/*\n  Properties of the task objects: (as defined in taskReducer.js)\n  {\n    id: Number,\n    taskName: String,\n    running: boolean,\n    completed: boolean,\n    dateStarted: Date object, // this should be called dateCreated\n    timerStatusArray: [ { status: \"started\", when: now }, { status: \"paused\", when: now }, { status: \"resumed\", when: now },{ status: \"paused\", when: completionDate ],\n    dateCompleted: DateObject,\n    isDetailedTask: boolean,\n    detailedTaskTimeUnits: String,\n    detailedTaskDuration: Number\n  }\n*/\n\nconst taskOperations = {\n  // Does not include currently running session time\n  totalTimeByDay: task => {\n    const days = {};\n    const statusArray = task.timerStatusArray;\n\n    // start on the second element, first 'pause' status.\n    for (let i = 1; i < statusArray.length; i += 2) {\n      // TODO: add status validation and throw error if invalid\n      const startDate = new Date(statusArray[i - 1].when);\n      const startDateString = startDate.toLocaleDateString();\n\n      const stopDate = new Date(statusArray[i].when);\n      const stopDateString = stopDate.toLocaleDateString();\n      if (startDateString === stopDateString) {\n        // Task session runs for only one day\n        const time = (stopDate.getTime() - startDate.getTime()) / 1000;\n        days[startDateString] = time + (days[startDateString] || 0);\n      } else {\n        // Task session runs between 2 or more days.\n\n        // Add start till midnight time.\n        const startMidnight = new Date(startDate.valueOf());\n        startMidnight.setHours(24, 0, 0, 0);\n\n        const startTimeTillMidnight =\n          (startMidnight.getTime() - startDate.getTime()) / 1000;\n\n        days[startDateString] =\n          startTimeTillMidnight + (days[startDateString] || 0);\n\n        // add stop after midnight time\n        const stopMidnight = new Date(stopDate.valueOf());\n        stopMidnight.setHours(0, 0, 0, 0);\n\n        const stopTimeAfterMidnight =\n          (stopDate.getTime() - stopMidnight.getTime()) / 1000;\n\n        days[stopDateString] =\n          stopTimeAfterMidnight + (days[stopDateString] || 0);\n\n        // Check for potential full 24hour days in between\n        while (startMidnight.getTime() < stopMidnight.getTime()) {\n          // Add 24hr day\n          days[startMidnight.toLocaleDateString()] =\n            24 * 60 * 60 + (days[startMidnight.toLocaleDateString()] || 0);\n          // Increment day\n          startMidnight.setHours(24);\n        }\n      }\n    }\n\n    return days;\n  },\n  totalTime: task => {\n    let time = 0;\n    const statusArray = task.timerStatusArray;\n\n    // start on the second element, first 'pause' status.\n    for (let i = 1; i < statusArray.length; i += 2) {\n      // TODO: add status validation and throw error if invalid\n      const startMS = new Date(statusArray[i - 1].when).getTime();\n      const stopMS = new Date(statusArray[i].when).getTime();\n      time += (stopMS - startMS) / 1000;\n    }\n    return time;\n  }\n};\n\nexport default taskOperations;\n","import taskOperations from './taskOperations';\n// import zeroPad from './zeroPad';\n\n// Task Data to Chart Data conversion functions\n\n/*\n  Properties of the task objects: (as defined in taskReducer.js)\n  {\n    id: Number,\n    taskName: String,\n    running: boolean,\n    completed: boolean,\n    dateStarted: Date object, // this should be called dateCreated\n    timerStatusArray: [ { status: \"started\", when: now }, { status: \"paused\", when: now }, { status: \"resumed\", when: now },{ status: \"paused\", when: completionDate ],\n    dateCompleted: DateObject,\n    isDetailedTask: boolean,\n    detailedTaskTimeUnits: String,\n    detailedTaskDuration: Number\n  }\n*/\n\nconst chartFormats = {\n  getDailyTotals: tasks => {\n    const totalTaskDaysTimeObj = tasks.reduce((acc, task) => {\n      const days = taskOperations.totalTimeByDay(task);\n      Object.keys(days).forEach(date => {\n        acc[date] = days[date] + (acc[date] || 0);\n      });\n      return acc;\n    }, {});\n\n    const TotalTaskDaysArray = Object.keys(totalTaskDaysTimeObj)\n      .map(date => ({\n        date,\n        minutes: Math.round(totalTaskDaysTimeObj[date] / 60)\n      }))\n      .sort((a, b) => new Date(b.date) - new Date(a.date));\n    return TotalTaskDaysArray;\n  },\n\n  getTaskTotals: tasks => {\n    return tasks\n      ? tasks.map(task => ({\n          taskName: task.taskName,\n          minutes: Math.round(taskOperations.totalTime(task) / 60)\n        }))\n      : [];\n  }\n};\nexport default chartFormats;\n// const dateToMonthSlashDay = dateString => {\n//     const date = new Date(dateString);\n//     return `${zeroPad(date.getMonth())}/${zeroPad(date.getDay())}`;\n//   };\n//   const taskTotals = tasks => tasks.reduce((acc, task) => {if (acc[task])}, {});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Card from 'react-bootstrap/Card';\nimport TaskChart from '../components/TaskChart';\nimport chartFormats from '../util/chartData';\nimport taskOperations from '../util/taskOperations';\n\nconst ReportsPage = ({ taskList }) => {\n  const TotalMinutes =\n    taskList.reduce((acc, task) => acc + taskOperations.totalTime(task), 0) /\n    60;\n  const TotalDisplay =\n    TotalMinutes < 60\n      ? `${TotalMinutes.toFixed(1)} minutes`\n      : `${(TotalMinutes / 60).toFixed(1)} hours`;\n\n  return (\n    <>\n      <h2 style={{ textAlign: 'right' }}>{TotalDisplay} tracked total</h2>\n      <Card className=\"text-center mt-3\">\n        <Card.Body>\n          <Card.Title>Daily Tracked Time</Card.Title>{' '}\n          <TaskChart\n            data={chartFormats.getDailyTotals(taskList)}\n            title=\"\"\n            xKey=\"date\"\n            xTitle=\"date\"\n            yKey=\"minutes\"\n            yTitle=\"Minutes\"\n          />\n        </Card.Body>\n      </Card>\n      <Card className=\"text-center  mt-3\">\n        <Card.Body>\n          <Card.Title>Task Totals</Card.Title>\n          <TaskChart\n            data={chartFormats.getTaskTotals(taskList)}\n            title=\"\"\n            xKey=\"taskName\"\n            xTitle=\"Task\"\n            yKey=\"minutes\"\n            yTitle=\"Minutes\"\n          />\n        </Card.Body>\n      </Card>\n    </>\n  );\n};\n/* make sure to add PropTypes if any */\n\nReportsPage.propTypes = {\n  taskList: PropTypes.array.isRequired\n};\n\nconst mapStateToProps = state => {\n  return {\n    taskList: state.tasks.taskList\n  };\n};\nexport default connect(mapStateToProps)(ReportsPage);\n","/* eslint-disable no-shadow */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport Alert from \"react-bootstrap/Alert\";\nimport { deleteAllTasks } from \"../actions/taskActions\";\n\nconst SettingsPage = ({ deleteAllTasks }) => {\n  const [redirect, setRedirect] = useState(false);\n\n  const deleteClicked = () => {\n    deleteAllTasks();\n    setRedirect(true);\n  };\n\n  return (\n    <Container>\n      <div className=\"page-header\">\n        <h2 className=\"display-3\">Settings</h2>\n      </div>\n\n      {redirect ? (\n        <Redirect to=\"/mytasks\" />\n      ) : (\n        <Row>\n          <Col span={{ xs: 12 }}>\n            <Alert variant=\"danger\">\n              <Alert.Heading>Delete All Tasks?</Alert.Heading>\n              <p>This cannot be undone.</p>\n              <Button variant=\"danger\" onClick={deleteClicked}>\n                Delete All Tasks\n              </Button>\n            </Alert>\n          </Col>\n        </Row>\n      )}\n    </Container>\n  );\n};\n\nSettingsPage.propTypes = {\n  deleteAllTasks: PropTypes.func.isRequired\n};\n\nexport default connect(\n  null,\n  { deleteAllTasks }\n)(SettingsPage);\n","/* eslint-disable no-unused-vars */\nimport React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n/* Bootstrap Imports */\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\n/* React Router */\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\n/* custom components */\nimport MainContent from \"./components/MainContent\";\nimport TimeTrackerNavbar from \"./components/TimeTrackerNavbar\";\n\n/* Pages */\nimport CreateTaskPage from \"./pages/CreateTaskPage\";\nimport RunningTasksPage from \"./pages/RunningTasksPage\";\nimport ReportsPage from \"./pages/ReportsPage\";\nimport SettingsPage from \"./pages/SettingsPage\";\n\nfunction App() {\n  return (\n    <main>\n      <Router>\n        <TimeTrackerNavbar />\n        <Container fluid>\n          <Row>\n            {/* Bootstrap Column for the main content */}\n            <Col xs={{ span: 12 }}>\n              <MainContent>\n                <Switch>\n                  <Route exact path=\"/\" component={CreateTaskPage} />\n                  <Route exact path=\"/reports\" component={ReportsPage} />\n                  <Route exact path=\"/mytasks\" component={RunningTasksPage} />\n                  <Route exact path=\"/settings\" component={SettingsPage} />\n                </Switch>\n              </MainContent>\n            </Col>\n          </Row>\n        </Container>\n      </Router>\n    </main>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n\n/* Redux Store */\nimport store from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}